[ DI 별 설정방법 ]

xml 파일을 이용한 DI 설정방법 : GenericXmlApplicationContext() 이용
Java 파일을 이용한 DI 설정방법 : AnnotationConfigApplicationContext() 이용
  - @Configuration (클래스) -> @Bean (함수)
xml 과 Java를 같이 이용한 DI 설정방법 : xml 내부에 Java에서 생성한 Bean을 끼워 넣음.<annotation-config>
Java 내부에 xml 끼워서 설정하는 방법 : parsing할 java 파일에 Annotation 적용 @ImportResource 이용.
===========================================================================================

[ DI 자동의존 및 Bean 생명주기 와 범위 ]
※ Annotation @Autowired (객체간 자동 의존)
 - 일일이 의존관계를 설정할 필요없이 자동으로 property 나 Constructor-param값으로 Bean 전달(연결)
 - 역할 : 자동의존으로 개발 기간 단축 효과, 유지보수 시, 용이함
 - 사용 : 대상에 @Autowired 사용 [생성자 주입, setter 주입, 필드 주입]
 - 유의사항 : setter 주입 보다 생성자 주입이 안전함

※ Bean 생명주기
 - Bean 객체 생성시 EnviromentAware, InitializingBean 이용하여 자동 호출(Interface)
----------------------------------------------------------------------------------
  - EnviromentAware, InitializingBean : 객체가 생성 될때 실행
 - DisposableBean : 객체가 소멸될 때 실행
※ Implements 호출 시점
 - EnviromentAware : Bean이 생성되기 전에 수행되며, 환경변수에 대한 변경이 생길 시에만 호출.
 - InitializingBean : Bean 초기화 과정에서 호출(ctx.refresh())

----------------------------------------------------------------------------------
 - 단계적 실행
1. Container Create : GenericXmlApplicationContext()
2. Parsing : ctx.load()
3. Bean Create : ctx.refresh()
4. Bean Used : ctx.getBean()
5. Container Destroy : ctx.close() - Bean 객체도 함께 소멸됨

※ Bean 범위(범위 = 객체의 영향권을 결정 하는 것)
Container 생성 -> Bean 생성
- 생성된 Bean 은 scope를 소유하고있음
- Default Scope = singleton